# ===================================================================
# 범용 Python FastAPI CI/CD 배포 워크플로우
# ===================================================================

name: CICD-HOME-SERVER

# ===================================================================
# 트리거 설정
# ===================================================================
on:
  push:
    branches:
      # NOTE: 사용 할 브랜치만 빼고 주석처리
      - main     # 프로덕션 배포
      - release  # 프로덕션 배포
      - develop  # 개발 환경 배포
      - test     # 테스트 환경 배포
  workflow_dispatch:   # 수동 실행 허용

jobs:
  # ===================================================================
  # 빌드 작업
  # ===================================================================
  build:
    name: 애플리케이션 빌드
    runs-on: ubuntu-latest

    steps:
      # 1. 소스코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # 2. 빌드 설정 로드
      - name: 빌드 설정 로드
        id: config
        run: |
          echo "⚙️ deploy.env 파일에서 빌드 설정을 로드합니다..."
          while IFS='=' read -r key value; do
            if [[ ! $key =~ ^#.*$ ]] && [[ -n $key ]] && [[ ! $key =~ ^[[:space:]]*$ ]]; then
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | xargs)
              echo "${key}=${value}" >> $GITHUB_OUTPUT
              echo "✅ 설정 로드: ${key}=${value}"
            fi
          done < .github/config/deploy.env

      # 3. Docker 빌드 환경 설정 (기존 4번)
      - name: Docker 빌드환경 설정
        uses: docker/setup-buildx-action@v3

      # 4. DockerHub 로그인 (기존 5번)
      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker 레이어 캐싱 설정 (기존 6번)
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 6. Docker 이미지 빌드 및 푸시 (기존 7번)
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.config.outputs.PROJECT_NAME }}:${{ github.ref_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # 7. Docker 캐시 정리 (기존 8번)
      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # ===================================================================
  # 배포 작업
  # ===================================================================
  deploy:
    name: 홈 서버 배포
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃 (설정 파일 읽기용)
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # 2. 배포 설정 로드
      - name: 배포 설정 로드
        id: config
        run: |
          echo "📄 deploy.env 파일에서 설정을 로드합니다..."
          while IFS='=' read -r key value; do
            if [[ ! $key =~ ^#.*$ ]] && [[ -n $key ]] && [[ ! $key =~ ^[[:space:]]*$ ]]; then
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | xargs)
              echo "${key}=${value}" >> $GITHUB_OUTPUT
              echo "✅ 설정 로드: ${key}=${value}"
            fi
          done < .github/config/deploy.env

      # 3. SSH를 통한 원격 서버 배포 실행
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            set -e

            # ============================================================
            # 설정값 로드
            # ============================================================
            echo "🔧 배포 설정 로드 중..."
            BRANCH="${{ github.ref_name }}"
            PROJECT_NAME="${{ steps.config.outputs.PROJECT_NAME }}"
            PROJECT_BASE_PATH="${{ steps.config.outputs.PROJECT_BASE_PATH }}"
            PROJECT_FOLDER_NAME="${{ steps.config.outputs.PROJECT_FOLDER_NAME }}"
            PROJECT_SUB_PATH="${{ steps.config.outputs.PROJECT_SUB_PATH }}"
            PRODUCTION_PORT="${{ steps.config.outputs.PRODUCTION_PORT }}"
            DEVELOPMENT_PORT="${{ steps.config.outputs.DEVELOPMENT_PORT }}"
            TEST_PORT="${{ steps.config.outputs.TEST_PORT }}"
            HOST_MOUNT_PATH="${PROJECT_BASE_PATH}/${PROJECT_FOLDER_NAME}/${PROJECT_SUB_PATH}"
            CONTAINER_MOUNT_PATH="/mnt/${PROJECT_FOLDER_NAME}"

            # ============================================================
            # 브랜치별 포트 및 컨테이너명 설정
            # ============================================================
            if [ "$BRANCH" == "main" ] || [ "$BRANCH" == "release" ]; then
              PORT="$PRODUCTION_PORT"
              CONTAINER_NAME="${PROJECT_NAME}"
              echo "🏭 프로덕션 환경으로 배포합니다"
            elif [ "$BRANCH" == "develop" ]; then
              PORT="$DEVELOPMENT_PORT"
              CONTAINER_NAME="${PROJECT_NAME}-dev"
              echo "🖥️ 개발 환경으로 배포합니다"
            elif [ "$BRANCH" == "test" ]; then
              PORT="$TEST_PORT"
              CONTAINER_NAME="${PROJECT_NAME}-test"
              echo "🧪 테스트 환경으로 배포합니다"
            else
              echo "⚠️ 지원하지 않는 브랜치입니다: $BRANCH"
              exit 1
            fi

            echo "📋 배포 설정 정보: ..." # (설정 정보 출력은 생략)

            # ============================================================
            # 🔑 원격 서버에 .env 파일 생성
            # ============================================================
            # Docker run 명령어에 추가할 --env-file 옵션을 저장할 변수
            ENV_FILE_OPTION=""
            
            # GitHub Secrets에 ENV가 존재하는지 확인
            if [ -n "${{ secrets.ENV }}" ]; then
              echo "📝 GitHub Secrets에 ENV가 존재합니다. 원격 서버에 .env 파일을 생성합니다..."
              echo "${{ secrets.ENV }}" > .env
              ENV_FILE_OPTION="--env-file .env" # 변수가 존재할 경우에만 옵션 추가
              echo "✅ .env 파일이 성공적으로 생성되었습니다."
            else
              echo "ℹ️ GitHub Secrets에 ENV가 존재하지 않습니다. .env 파일 생성을 건너뜁니다."
            fi

            # ============================================================
            # Docker 이미지 풀 (Pull)
            # ============================================================
            echo "⬇️ Docker 이미지 풀: ${{ secrets.DOCKERHUB_USERNAME }}/${PROJECT_NAME}:${BRANCH}"
            docker pull "${{ secrets.DOCKERHUB_USERNAME }}/${PROJECT_NAME}:${BRANCH}"

            # ============================================================
            # 기존 컨테이너 정리
            # ============================================================
            echo "🧹 컨테이너 $CONTAINER_NAME 존재 여부 확인 중..."
            if docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then
              echo "⚠️ 컨테이너 $CONTAINER_NAME 이(가) 존재합니다. 중지 및 삭제 중..."
              docker rm -f "$CONTAINER_NAME"
              echo "✅ 컨테이너 $CONTAINER_NAME 이(가) 삭제되었습니다."
            else
              echo "ℹ️ 존재하는 컨테이너 $CONTAINER_NAME 이(가) 없습니다."
            fi

            # ============================================================
            # 호스트 디렉토리 준비
            # ============================================================
            echo "📂 호스트 디렉토리 준비: $HOST_MOUNT_PATH"
            mkdir -p "$HOST_MOUNT_PATH"

            # ============================================================
            # 새 컨테이너 실행
            # ============================================================
            echo "🚀 새로운 컨테이너 $CONTAINER_NAME 실행 중..."
            docker run -d \
              -p "${PORT}:8000" \
              --name "$CONTAINER_NAME" \
              $ENV_FILE_OPTION \
              -e TZ=Asia/Seoul \
              -v /etc/localtime:/etc/localtime:ro \
              -v "${HOST_MOUNT_PATH}:${CONTAINER_MOUNT_PATH}" \
              "${{ secrets.DOCKERHUB_USERNAME }}/${PROJECT_NAME}:${BRANCH}"

            # ============================================================
            # 사용하지 않는 Docker 이미지 정리 (선택 사항)
            # ============================================================
            echo "🧹 사용하지 않는 Docker 이미지를 정리합니다..."
            docker image prune -f

            # ============================================================
            # 배포 완료 확인
            # ============================================================
            echo "✅ 배포가 성공적으로 완료되었습니다!" # (결과 요약은 생략)
